{"ast":null,"code":"export const drawRect = (detections, ctx) => {\n  // Loop through each prediction\n  let empPresent = false;\n  let cpPresent = false;\n  detections.forEach(prediction => {\n    // Extract boxes and classes\n    const [x, y, width, height] = prediction['bbox'];\n    const text = prediction['class'];\n\n    if (text == 'person' || text == 'cellphone') {\n      // Set styling\n      const color = Math.floor(Math.random() * 16777215).toString(16);\n      ctx.strokeStyle = '#' + color;\n      ctx.font = '18px Arial'; // Draw rectangles and text\n\n      ctx.beginPath();\n      ctx.fillStyle = '#' + color;\n      ctx.fillText(text, x, y);\n      ctx.rect(x, y, width, height);\n      ctx.stroke();\n\n      if (text == 'person') {\n        document.getElementById('personText').innerHTML = 'Employee is present';\n        empPresent = true;\n      }\n\n      if (text == 'cellphone') {\n        document.getElementById('phoneText').innerHTML = 'Employee is with a phone';\n        cpPresent = true;\n      }\n    }\n  });\n\n  if (!empPresent) {\n    document.getElementById('personText').innerHTML = 'Employee is not present';\n  }\n\n  if (!cpPresent) {\n    document.getElementById('phoneText').innerHTML = 'Employee is not with a phone';\n  }\n};","map":{"version":3,"sources":["D:/Ian/Documents/BSCS 4A/2nd sem/Automata and Language theory/RealTimeObjectDetectionTFJSReact-main/src/utilities.js"],"names":["drawRect","detections","ctx","empPresent","cpPresent","forEach","prediction","x","y","width","height","text","color","Math","floor","random","toString","strokeStyle","font","beginPath","fillStyle","fillText","rect","stroke","document","getElementById","innerHTML"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,CAACC,UAAD,EAAaC,GAAb,KAAoB;AAC1C;AAEA,MAAIC,UAAU,GAAG,KAAjB;AACA,MAAIC,SAAS,GAAG,KAAhB;AAEAH,EAAAA,UAAU,CAACI,OAAX,CAAmBC,UAAU,IAAI;AAE/B;AACA,UAAM,CAACC,CAAD,EAAIC,CAAJ,EAAOC,KAAP,EAAcC,MAAd,IAAwBJ,UAAU,CAAC,MAAD,CAAxC;AACA,UAAMK,IAAI,GAAGL,UAAU,CAAC,OAAD,CAAvB;;AAGA,QAAIK,IAAI,IAAI,QAAR,IAAoBA,IAAI,IAAI,WAAhC,EAA6C;AAE3C;AACA,YAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,QAAzB,EAAmCC,QAAnC,CAA4C,EAA5C,CAAd;AACAd,MAAAA,GAAG,CAACe,WAAJ,GAAkB,MAAML,KAAxB;AACAV,MAAAA,GAAG,CAACgB,IAAJ,GAAW,YAAX,CAL2C,CAO3C;;AACAhB,MAAAA,GAAG,CAACiB,SAAJ;AACAjB,MAAAA,GAAG,CAACkB,SAAJ,GAAgB,MAAMR,KAAtB;AACAV,MAAAA,GAAG,CAACmB,QAAJ,CAAaV,IAAb,EAAmBJ,CAAnB,EAAsBC,CAAtB;AACAN,MAAAA,GAAG,CAACoB,IAAJ,CAASf,CAAT,EAAYC,CAAZ,EAAeC,KAAf,EAAsBC,MAAtB;AACAR,MAAAA,GAAG,CAACqB,MAAJ;;AAEA,UAAGZ,IAAI,IAAI,QAAX,EAAoB;AAClBa,QAAAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,SAAtC,GAAkD,qBAAlD;AACAvB,QAAAA,UAAU,GAAG,IAAb;AACD;;AACD,UAAGQ,IAAI,IAAI,WAAX,EAAuB;AACrBa,QAAAA,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCC,SAArC,GAAiD,0BAAjD;AACAtB,QAAAA,SAAS,GAAG,IAAZ;AACD;AAEF;AAEF,GAhCD;;AAkCA,MAAG,CAACD,UAAJ,EAAe;AACbqB,IAAAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,SAAtC,GAAkD,yBAAlD;AACD;;AACD,MAAG,CAACtB,SAAJ,EAAc;AACZoB,IAAAA,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCC,SAArC,GAAiD,8BAAjD;AACD;AACF,CA9CM","sourcesContent":["export const drawRect = (detections, ctx) =>{\n  // Loop through each prediction\n\n  let empPresent = false;\n  let cpPresent = false;\n  \n  detections.forEach(prediction => {\n\n    // Extract boxes and classes\n    const [x, y, width, height] = prediction['bbox']; \n    const text = prediction['class']; \n\n\n    if (text == 'person' || text == 'cellphone' ){\n\n      // Set styling\n      const color = Math.floor(Math.random()*16777215).toString(16);\n      ctx.strokeStyle = '#' + color\n      ctx.font = '18px Arial';\n\n      // Draw rectangles and text\n      ctx.beginPath();   \n      ctx.fillStyle = '#' + color\n      ctx.fillText(text, x, y);\n      ctx.rect(x, y, width, height); \n      ctx.stroke();\n\n      if(text == 'person'){\n        document.getElementById('personText').innerHTML = 'Employee is present'\n        empPresent = true\n      }\n      if(text == 'cellphone'){\n        document.getElementById('phoneText').innerHTML = 'Employee is with a phone'\n        cpPresent = true\n      }\n\n    }\n\n  });\n\n  if(!empPresent){\n    document.getElementById('personText').innerHTML = 'Employee is not present'\n  }\n  if(!cpPresent){\n    document.getElementById('phoneText').innerHTML = 'Employee is not with a phone'\n  }\n}\n"]},"metadata":{},"sourceType":"module"}