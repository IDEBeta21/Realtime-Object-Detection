{"ast":null,"code":"export const drawRect = (detections, ctx) => {\n  // Loop through each prediction\n  let empPresent = false;\n  let cpPresent = false;\n\n  const calculateCount = (arr, query) => {\n    let count = 0;\n\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] === query) {\n        count++;\n        continue;\n      }\n\n      ;\n\n      if (Array.isArray(arr[i])) {\n        count += calculateCount(arr[i], query);\n      }\n    }\n\n    ;\n    return count;\n  };\n\n  detections.forEach(prediction => {\n    // Extract boxes and classes\n    const [x, y, width, height] = prediction['bbox'];\n    const text = prediction['class'];\n\n    if (text === 'person' || text === 'cell phone') {\n      // Set styling\n      const color = Math.floor(Math.random() * 16777215).toString(16);\n      ctx.strokeStyle = '#' + color;\n      ctx.font = '18px Arial'; // Draw rectangles and text\n\n      ctx.beginPath();\n      ctx.fillStyle = '#' + color;\n      ctx.fillText(text, x, y);\n      ctx.rect(x, y, width, height);\n      ctx.stroke();\n\n      if (text === 'person') {\n        empPresent = true;\n      }\n\n      if (text === 'cell phone') {\n        cpPresent = true;\n      }\n    }\n  });\n\n  if (!empPresent) {\n    document.getElementById('personText').innerHTML = 'Employee is not present';\n  } else {\n    document.getElementById('personText').innerHTML = 'Employee is with a phone';\n  }\n\n  if (!cpPresent) {\n    document.getElementById('personText').innerHTML = 'Employee is not with a phone';\n  } else {\n    document.getElementById('personText').innerHTML = 'Employee is present';\n  }\n\n  if (calculateCount(detections, 'person') !== 0) {\n    document.getElementById('personText').innerHTML = 'Employee is present';\n  }\n};","map":{"version":3,"sources":["D:/Ian/Documents/BSCS 4A/2nd sem/Automata and Language theory/RealTimeObjectDetectionTFJSReact-main/src/utilities.js"],"names":["drawRect","detections","ctx","empPresent","cpPresent","calculateCount","arr","query","count","i","length","Array","isArray","forEach","prediction","x","y","width","height","text","color","Math","floor","random","toString","strokeStyle","font","beginPath","fillStyle","fillText","rect","stroke","document","getElementById","innerHTML"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,CAACC,UAAD,EAAaC,GAAb,KAAoB;AAC1C;AAEA,MAAIC,UAAU,GAAG,KAAjB;AACA,MAAIC,SAAS,GAAG,KAAhB;;AAEA,QAAMC,cAAc,GAAG,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACrC,QAAIC,KAAK,GAAG,CAAZ;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,GAAG,CAACI,MAAvB,EAA+BD,CAAC,EAAhC,EAAmC;AACjC,UAAGH,GAAG,CAACG,CAAD,CAAH,KAAWF,KAAd,EAAoB;AAChBC,QAAAA,KAAK;AACL;AACH;;AAAA;;AACD,UAAGG,KAAK,CAACC,OAAN,CAAcN,GAAG,CAACG,CAAD,CAAjB,CAAH,EAAyB;AACvBD,QAAAA,KAAK,IAAIH,cAAc,CAACC,GAAG,CAACG,CAAD,CAAJ,EAASF,KAAT,CAAvB;AACD;AACF;;AAAA;AACD,WAAOC,KAAP;AACD,GAZD;;AAcAP,EAAAA,UAAU,CAACY,OAAX,CAAmBC,UAAU,IAAI;AAE/B;AACA,UAAM,CAACC,CAAD,EAAIC,CAAJ,EAAOC,KAAP,EAAcC,MAAd,IAAwBJ,UAAU,CAAC,MAAD,CAAxC;AACA,UAAMK,IAAI,GAAGL,UAAU,CAAC,OAAD,CAAvB;;AAGA,QAAIK,IAAI,KAAK,QAAT,IAAqBA,IAAI,KAAK,YAAlC,EAAgD;AAE9C;AACA,YAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,QAAzB,EAAmCC,QAAnC,CAA4C,EAA5C,CAAd;AACAtB,MAAAA,GAAG,CAACuB,WAAJ,GAAkB,MAAML,KAAxB;AACAlB,MAAAA,GAAG,CAACwB,IAAJ,GAAW,YAAX,CAL8C,CAO9C;;AACAxB,MAAAA,GAAG,CAACyB,SAAJ;AACAzB,MAAAA,GAAG,CAAC0B,SAAJ,GAAgB,MAAMR,KAAtB;AACAlB,MAAAA,GAAG,CAAC2B,QAAJ,CAAaV,IAAb,EAAmBJ,CAAnB,EAAsBC,CAAtB;AACAd,MAAAA,GAAG,CAAC4B,IAAJ,CAASf,CAAT,EAAYC,CAAZ,EAAeC,KAAf,EAAsBC,MAAtB;AACAhB,MAAAA,GAAG,CAAC6B,MAAJ;;AAEA,UAAGZ,IAAI,KAAK,QAAZ,EAAqB;AACnBhB,QAAAA,UAAU,GAAG,IAAb;AACD;;AAED,UAAGgB,IAAI,KAAK,YAAZ,EAAyB;AACvBf,QAAAA,SAAS,GAAG,IAAZ;AACD;AACF;AAEF,GA9BD;;AAgCA,MAAG,CAACD,UAAJ,EAAe;AACb6B,IAAAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,SAAtC,GAAkD,yBAAlD;AACD,GAFD,MAEK;AACHF,IAAAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,SAAtC,GAAkD,0BAAlD;AACD;;AACD,MAAG,CAAC9B,SAAJ,EAAc;AACZ4B,IAAAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,SAAtC,GAAkD,8BAAlD;AACD,GAFD,MAEK;AACHF,IAAAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,SAAtC,GAAkD,qBAAlD;AACD;;AAED,MAAG7B,cAAc,CAACJ,UAAD,EAAa,QAAb,CAAd,KAAyC,CAA5C,EAA8C;AAC5C+B,IAAAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,SAAtC,GAAkD,qBAAlD;AACD;AACF,CAlEM","sourcesContent":["export const drawRect = (detections, ctx) =>{\n  // Loop through each prediction\n\n  let empPresent = false;\n  let cpPresent = false;\n\n  const calculateCount = (arr, query) => {\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n      if(arr[i] === query){\n          count++;\n          continue;\n      };\n      if(Array.isArray(arr[i])){\n        count += calculateCount(arr[i], query);\n      }\n    };\n    return count;\n  };\n  \n  detections.forEach(prediction => {\n\n    // Extract boxes and classes\n    const [x, y, width, height] = prediction['bbox']; \n    const text = prediction['class']; \n\n\n    if (text === 'person' || text === 'cell phone' ){\n\n      // Set styling\n      const color = Math.floor(Math.random()*16777215).toString(16);\n      ctx.strokeStyle = '#' + color\n      ctx.font = '18px Arial';\n\n      // Draw rectangles and text\n      ctx.beginPath();   \n      ctx.fillStyle = '#' + color\n      ctx.fillText(text, x, y);\n      ctx.rect(x, y, width, height); \n      ctx.stroke();\n\n      if(text === 'person'){\n        empPresent = true\n      }\n\n      if(text === 'cell phone'){\n        cpPresent = true\n      }\n    }\n\n  });\n\n  if(!empPresent){\n    document.getElementById('personText').innerHTML = 'Employee is not present'\n  }else{\n    document.getElementById('personText').innerHTML = 'Employee is with a phone'\n  }\n  if(!cpPresent){\n    document.getElementById('personText').innerHTML = 'Employee is not with a phone'\n  }else{\n    document.getElementById('personText').innerHTML = 'Employee is present'\n  }\n\n  if(calculateCount(detections, 'person') !== 0){\n    document.getElementById('personText').innerHTML = 'Employee is present'\n  }\n}\n"]},"metadata":{},"sourceType":"module"}