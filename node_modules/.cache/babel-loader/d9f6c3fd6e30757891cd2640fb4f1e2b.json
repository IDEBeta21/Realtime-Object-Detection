{"ast":null,"code":"export const drawRect = (detections, ctx) => {\n  // Loop through each prediction\n  detections.forEach(prediction => {\n    // Extract boxes and classes\n    const [x, y, width, height] = prediction['bbox'];\n    const text = prediction['class'];\n    var empPresent = false;\n\n    if (text == 'person') {\n      // Set styling\n      const color = Math.floor(Math.random() * 16777215).toString(16);\n      ctx.strokeStyle = '#' + color;\n      ctx.font = '18px Arial'; // Draw rectangles and text\n\n      ctx.beginPath();\n      ctx.fillStyle = '#' + color;\n      ctx.fillText(text, x, y);\n      ctx.rect(x, y, width, height);\n      ctx.stroke();\n\n      if (text == 'person') {\n        document.getElementById('personText').innerHTML = 'Employee is present';\n        empPresent = true;\n      }\n    }\n\n    if (!empPresent) {\n      document.getElementById('personText').innerHTML = 'Employee is not present';\n    }\n\n    empPresent = false;\n  });\n};","map":{"version":3,"sources":["D:/Ian/Documents/BSCS 4A/2nd sem/Automata and Language theory/RealTimeObjectDetectionTFJSReact-main/src/utilities.js"],"names":["drawRect","detections","ctx","forEach","prediction","x","y","width","height","text","empPresent","color","Math","floor","random","toString","strokeStyle","font","beginPath","fillStyle","fillText","rect","stroke","document","getElementById","innerHTML"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,CAACC,UAAD,EAAaC,GAAb,KAAoB;AAC1C;AACAD,EAAAA,UAAU,CAACE,OAAX,CAAmBC,UAAU,IAAI;AAE/B;AACA,UAAM,CAACC,CAAD,EAAIC,CAAJ,EAAOC,KAAP,EAAcC,MAAd,IAAwBJ,UAAU,CAAC,MAAD,CAAxC;AACA,UAAMK,IAAI,GAAGL,UAAU,CAAC,OAAD,CAAvB;AAEA,QAAIM,UAAU,GAAG,KAAjB;;AAEA,QAAID,IAAI,IAAI,QAAZ,EAAsB;AAEpB;AACA,YAAME,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,QAAzB,EAAmCC,QAAnC,CAA4C,EAA5C,CAAd;AACAb,MAAAA,GAAG,CAACc,WAAJ,GAAkB,MAAML,KAAxB;AACAT,MAAAA,GAAG,CAACe,IAAJ,GAAW,YAAX,CALoB,CAOpB;;AACAf,MAAAA,GAAG,CAACgB,SAAJ;AACAhB,MAAAA,GAAG,CAACiB,SAAJ,GAAgB,MAAMR,KAAtB;AACAT,MAAAA,GAAG,CAACkB,QAAJ,CAAaX,IAAb,EAAmBJ,CAAnB,EAAsBC,CAAtB;AACAJ,MAAAA,GAAG,CAACmB,IAAJ,CAAShB,CAAT,EAAYC,CAAZ,EAAeC,KAAf,EAAsBC,MAAtB;AACAN,MAAAA,GAAG,CAACoB,MAAJ;;AAEA,UAAGb,IAAI,IAAI,QAAX,EAAoB;AAClBc,QAAAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,SAAtC,GAAkD,qBAAlD;AACAf,QAAAA,UAAU,GAAG,IAAb;AACD;AACF;;AAED,QAAG,CAACA,UAAJ,EAAe;AACba,MAAAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,SAAtC,GAAkD,yBAAlD;AACD;;AACDf,IAAAA,UAAU,GAAG,KAAb;AACD,GAhCD;AAiCD,CAnCM","sourcesContent":["export const drawRect = (detections, ctx) =>{\n  // Loop through each prediction\n  detections.forEach(prediction => {\n\n    // Extract boxes and classes\n    const [x, y, width, height] = prediction['bbox']; \n    const text = prediction['class']; \n\n    var empPresent = false;\n\n    if (text == 'person' ){\n\n      // Set styling\n      const color = Math.floor(Math.random()*16777215).toString(16);\n      ctx.strokeStyle = '#' + color\n      ctx.font = '18px Arial';\n\n      // Draw rectangles and text\n      ctx.beginPath();   \n      ctx.fillStyle = '#' + color\n      ctx.fillText(text, x, y);\n      ctx.rect(x, y, width, height); \n      ctx.stroke();\n\n      if(text == 'person'){\n        document.getElementById('personText').innerHTML = 'Employee is present'\n        empPresent = true;\n      }\n    }\n\n    if(!empPresent){\n      document.getElementById('personText').innerHTML = 'Employee is not present'\n    }\n    empPresent = false;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}